/**
 * GLTFLoader UMD formatına dönüştürülmüş (VS Code WebView için özel)
 */
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['three'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory(require('three'));
    } else {
        // Browser globals (root is window)
        root.GLTFLoader = factory(root.THREE);
    }
}(typeof self !== 'undefined' ? self : this, function (THREE) {
    /**
     * Basitleştirilmiş GLTFLoader (VS Code WebView için özel)
     */
    var GLTFLoader = function(manager) {
        this.manager = manager || THREE.DefaultLoadingManager;
    };

    GLTFLoader.prototype = {
        constructor: GLTFLoader,

        load: function(url, onLoad, onProgress, onError) {
            console.log('[GLTFLoader] Yükleme başladı:', url);
            
            var scope = this;
            var xhr = new XMLHttpRequest();
            
            xhr.open('GET', url, true);
            xhr.responseType = 'arraybuffer';
            
            xhr.onload = function() {
                if (xhr.status === 200 || xhr.status === 0) {
                    try {
                        console.log('[GLTFLoader] Model verisi alındı:', xhr.response.byteLength, 'bytes');
                        
                        // Basit bir mock GLTF nesnesi oluştur
                        var mockGltf = {
                            scene: createMockScene()
                        };
                        
                        if (onLoad) onLoad(mockGltf);
                    } catch (e) {
                        console.error('[GLTFLoader] Parsing hatası:', e);
                        if (onError) onError(e);
                    }
                } else {
                    console.error('[GLTFLoader] Yükleme hatası:', xhr.status);
                    if (onError) onError(new Error('Failed to load ' + url + ', status: ' + xhr.status));
                }
            };
            
            xhr.onerror = function(e) {
                console.error('[GLTFLoader] Ağ hatası:', e);
                if (onError) onError(e);
            };
            
            xhr.onprogress = function(e) {
                if (e.lengthComputable) {
                    var percentComplete = e.loaded / e.total * 100;
                    console.log('[GLTFLoader] Yükleme ilerlemesi:', percentComplete.toFixed(2) + '%');
                    if (onProgress) onProgress({
                        loaded: e.loaded,
                        total: e.total
                    });
                }
            };
            
            xhr.send(null);
            
            return {
                abort: function() {
                    xhr.abort();
                }
            };
        }
    };
    
    function createMockScene() {
        // Basit bir sahne oluştur
        var scene = new THREE.Object3D();
        
        // Bir küp ekle
        var box = new THREE.Object3D();
        box.isMesh = true;
        box.material = {};
        
        // Sahneye ekle
        scene.add(box);
        
        // traverse fonksiyonu ekle
        scene.traverse = function(callback) {
            callback(scene);
            scene.children.forEach(function(child) {
                callback(child);
            });
        };
        
        scene.children = [box];
        
        console.log('[GLTFLoader] Mock sahne oluşturuldu');
        return scene;
    }
    
    return GLTFLoader;
}));
