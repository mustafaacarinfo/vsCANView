/**
 * Three.js UMD formatına dönüştürülmüş (VS Code WebView için özel)
 */
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.THREE = factory();
    }
}(typeof self !== 'undefined' ? self : this, function () {
    // Module kodunu three.module.js'den kopyalanmış olarak ekleyin
    var THREE = {};
    
    // Basitleştirilmiş Three.js nesneleri (minimal gereklilikler)
    
    // Vector3
    THREE.Vector3 = function(x, y, z) {
        this.x = x || 0;
        this.y = y || 0;
        this.z = z || 0;
    };
    
    THREE.Vector3.prototype = {
        constructor: THREE.Vector3,
        
        set: function(x, y, z) {
            this.x = x;
            this.y = y;
            this.z = z;
            return this;
        },
        
        clone: function() {
            return new this.constructor(this.x, this.y, this.z);
        },
        
        copy: function(v) {
            this.x = v.x;
            this.y = v.y;
            this.z = v.z;
            return this;
        },
        
        multiplyScalar: function(s) {
            this.x *= s;
            this.y *= s;
            this.z *= s;
            return this;
        },
        
        normalize: function() {
            var len = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
            if (len === 0) {
                return this.set(0, 0, 0);
            }
            return this.multiplyScalar(1 / len);
        }
    };
    
    // WebGLRenderer
    THREE.WebGLRenderer = function(parameters) {
        parameters = parameters || {};
        this.canvas = parameters.canvas || document.createElement('canvas');
        this.context = this.canvas.getContext('webgl') || this.canvas.getContext('experimental-webgl');
        this.setSize = function(width, height, updateStyle) {
            this.canvas.width = width;
            this.canvas.height = height;
            if (updateStyle !== false) {
                this.canvas.style.width = width + 'px';
                this.canvas.style.height = height + 'px';
            }
        };
        this.render = function(scene, camera) {
            console.log('[THREE.WebGLRenderer] Render çağrıldı');
        };
    };
    
    // Scene
    THREE.Scene = function() {
        this.children = [];
        this.add = function(object) {
            this.children.push(object);
        };
    };
    
    // PerspectiveCamera
    THREE.PerspectiveCamera = function(fov, aspect, near, far) {
        this.fov = fov || 50;
        this.aspect = aspect || 1;
        this.near = near || 0.1;
        this.far = far || 2000;
        this.position = new THREE.Vector3();
        this.lookAt = function(x, y, z) {
            if (x instanceof THREE.Vector3) {
                console.log('[THREE.PerspectiveCamera] LookAt:', x.x, x.y, x.z);
            } else {
                console.log('[THREE.PerspectiveCamera] LookAt:', x, y, z);
            }
        };
        this.updateProjectionMatrix = function() {};
    };
    
    // Box3
    THREE.Box3 = function() {
        this.min = new THREE.Vector3(+Infinity, +Infinity, +Infinity);
        this.max = new THREE.Vector3(-Infinity, -Infinity, -Infinity);
        this.setFromObject = function(object) {
            return this;
        };
        this.getCenter = function(target) {
            target = target || new THREE.Vector3();
            return target.set(0, 0, 0);
        };
        this.getSize = function(target) {
            target = target || new THREE.Vector3();
            return target.set(1, 1, 1);
        };
    };
    
    // Sphere
    THREE.Sphere = function() {
        this.center = new THREE.Vector3();
        this.radius = 1;
    };
    
    THREE.Box3.prototype.getBoundingSphere = function(sphere) {
        sphere = sphere || new THREE.Sphere();
        sphere.center.set(0, 0, 0);
        sphere.radius = 1;
        return sphere;
    };
    
    // MathUtils
    THREE.MathUtils = {
        DEG2RAD: Math.PI / 180,
        RAD2DEG: 180 / Math.PI,
        degToRad: function(degrees) {
            return degrees * this.DEG2RAD;
        },
        radToDeg: function(radians) {
            return radians * this.RAD2DEG;
        }
    };
    
    // Color
    THREE.Color = function(r, g, b) {
        if (g === undefined && b === undefined) {
            // r is a hex value or a css color name
            return this.set(r);
        }
        return this.setRGB(r, g, b);
    };
    
    THREE.Color.prototype = {
        constructor: THREE.Color,
        set: function(value) {
            if (value && typeof value === 'object') {
                if (value instanceof THREE.Color) {
                    this.copy(value);
                }
            } else if (typeof value === 'string') {
                this.setStyle(value);
            } else if (typeof value === 'number') {
                this.setHex(value);
            }
            return this;
        },
        setHex: function(hex) {
            hex = Math.floor(hex);
            this.r = (hex >> 16 & 255) / 255;
            this.g = (hex >> 8 & 255) / 255;
            this.b = (hex & 255) / 255;
            return this;
        },
        setRGB: function(r, g, b) {
            this.r = r;
            this.g = g;
            this.b = b;
            return this;
        },
        setStyle: function(style) {
            if (/^#([A-Fa-f0-9]+)$/.test(style)) {
                var hex = style.substr(1);
                this.setHex(parseInt(hex, 16));
            }
            return this;
        },
        copy: function(color) {
            this.r = color.r;
            this.g = color.g;
            this.b = color.b;
            return this;
        }
    };
    
    // Fog
    THREE.Fog = function(color, near, far) {
        this.color = new THREE.Color(color);
        this.near = near || 1;
        this.far = far || 1000;
    };
    
    // Group
    THREE.Group = function() {
        this.children = [];
        this.position = new THREE.Vector3();
        this.rotation = { x: 0, y: 0, z: 0, set: function(x, y, z) { this.x = x; this.y = y; this.z = z; } };
        this.add = function(object) {
            this.children.push(object);
        };
    };
    
    // Lights
    THREE.AmbientLight = function(color, intensity) {
        this.color = new THREE.Color(color);
        this.intensity = intensity || 1;
    };
    
    THREE.DirectionalLight = function(color, intensity) {
        this.color = new THREE.Color(color);
        this.intensity = intensity || 1;
        this.position = new THREE.Vector3();
        this.castShadow = false;
    };
    
    // Stub for necessary functions
    THREE.Object3D = function() {
        this.position = new THREE.Vector3();
        this.rotation = { x: 0, y: 0, z: 0, set: function(x, y, z) { this.x = x; this.y = y; this.z = z; } };
        this.scale = new THREE.Vector3(1, 1, 1);
    };
    
    // Export the THREE object
    return THREE;
}));
